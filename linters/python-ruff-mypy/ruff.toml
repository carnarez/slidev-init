# generic ruff configuration file

cache-dir = "/tmp/ruff_cache"
line-length = 88

# https://beta.ruff.rs/docs/rules/
# switching all rules on; we like to be exhaustive, even if slower...
# ignoring boolean traps though, sorry Martin (https://martinfowler.com/bliki/FlagArgument.html)
# ignoring django & pandas for obvious reasons
lint.select = [
  "A",     # flake8-builtins
  "AIR",   # airflow
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "COM",   # flake8-commas
# "CPY",   # flake8-copyright
  "D",     # pydocstyle
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle
  "EM",    # flake8-errmsg
  "ERA",   # eradicate
  "EXE",   # flake8-executable
  "F",     # pyflakes
# "FA",    # flake8-future-annotations
# "FBT",   # flake8-boolean-trap
# "FIX",   # flake8-fixme
  "FLY",   # flynt
# "FURB",  # refurb
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "LOG",   # flake8-logging
  "N",     # pep8-naming
  "NPY",   # numpy-specific rules
# "PD",    # pandas-vet
  "PERF",  # perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # pylint
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
# "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRIO",  # flake8-trio
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle
  "YTT",   # flake8-2020
]

# https://beta.ruff.rs/docs/rules/
# ignoring some rules that do not make sense to us, or that we simply ignore
lint.ignore = [
  "ANN002",   # missing type annotation for "*args"
  "ANN003",   # missing type annotation for "**kwargs"
  "ANN101",   # missing type annotation for "self" in method
  "ANN102",   # missing type annotation for "cls" in classmethod
  "D203",     # one blank line required before class docstring
  "D213",     # multi-line docstring summary should start at the second line
  "E741",     # ambiguous variable name
  "G004",     # f-string in logging
  "PLR2004",  # magic value used in comparison
  "RET504",   # unnecessary assignment before return statement
]

# https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
# ignoring some rules to please the formatter (and silent some intempestive warnings)
lint.extend-ignore = [
  "COM812",  # missing trailing comma
  "ISC001",  # single line implicit string concatenation
]

[lint.per-file-ignores]
"__init__.py" = [
  "D104", # missing docstring
  "F401", # unused imports
]
"test*.py" = [
  "S101", # use of assert 
]
"tests/**.py" = [
  "S101", # use of assert 
]
